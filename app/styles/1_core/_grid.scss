///*------------------------------------*\
//    #CORE - BREAKPOINTS
//\*------------------------------------*/

$mobile: 240px;
$large-mobile: 400px;
$tablet: 600px;
$large-tablet: 800px;
$desktop: 1000px;
$large-desktop: 1600px;

@include add-breakpoint('mobile', $mobile);
@include add-breakpoint('large-mobile', $large-mobile);
@include add-breakpoint('tablet', $tablet);
@include add-breakpoint('large-tablet', $large-tablet);
@include add-breakpoint('desktop', $desktop);
@include add-breakpoint('large-desktop', $large-desktop);

$breakpoint-has-widths: ('mobile', 'tablet', 'desktop');

///*------------------------------------*\
//    #CORE - GRID
//\*------------------------------------*/
// SUSY DEFAULTS
// $susy: (
//   flow: ltr,
//   math: fluid,
//   output: float,
//   gutter-position: after,
//   container: auto,
//   container-position: center,
//   columns: 4,
//   gutters: .25,
//   column-width: false,
//   global-box-sizing: content-box,
//   last-flow: to,
//   debug: (
//     image: hide,
//     color: rgba(#66f, .25),
//     output: background,
//     toggle: top right,
//   ),
//   use-custom: (
//     background-image: true,
//     background-options: false,
//     box-sizing: true,
//     clearfix: false,
//     rem: true,
//   )
// );

// SUSY CONFIG
$susy: (
  columns: 12,
  global-box-sizing: border-box,
  gutters:$spacing-unit/12rem,
  // debug: (
  //   image: show,
  //   color: rgba(#66f, .25),
  //   output: background,
  //   toggle: top right,
  // )
);

// Toggle the grid suffixes (ex. 'span-4@tablet'), defaults to 'true' (on)
$suffix: true;
$columnsNumber: map-get($susy, columns);

@mixin device-type($namespace:'') {
  $suffix: '';
  $extend: #{%};
  @if ($namespace != ''){
    $suffix: #{\@ + $namespace};
  }
  @include grid-default($namespace);
  @for $g from 1 through $columnsNumber {
    $spanValue: span($g of $columnsNumber);
    $pushValue: (100% - $spanValue) / 2;
    $gcd: gcd($g, $columnsNumber);
    $firstNumber: $g / $gcd;
    $secondNumber: $columnsNumber / $gcd;
    @if $suffix != '' {
      .span-#{$firstNumber}of#{$secondNumber}#{$suffix} {
        @include grid($spanValue, $pushValue);
      }
    } @else {
      .span-#{$firstNumber}of#{$secondNumber}{
        @include grid($spanValue, $pushValue);
      }
    }
  }
}

@function gcd($a, $b){
  @if $b == 0 {
    @return $a;
  } @else {
    @return gcd($b, $a%$b);
  }
}

@mixin grid($spanValue, $pushValue:'') {
  width:100%;
  @if $pushValue != ''{
    &.center{
      @include push(0);
    }
  }
  @include breakpoint($large-mobile) {
    width:$spanValue;
    @if $pushValue != ''{
      &.center{
        @include push($pushValue);
      }
    }
  }
}

@mixin grid-default($namespace:'') {
  $suffix: '';
  @if ($namespace != ''){
    $suffix: #{\@ + $namespace};
  }
  @for $i from 1 through $columnsNumber {
    $spanValue: span($i of $columnsNumber);
    $pushValue: (100% - $spanValue) / 2;
    @if $suffix != ''{
      .span-#{$i}#{$suffix} {
        @include grid($spanValue, $pushValue);
      }
      .push-#{$i}#{$suffix} {
        @include push($i);
      }
      .pull-#{$i}#{$suffix} {
        @include pull($i);
      }
    } @else {
      .span-#{$i}{
        @include grid($spanValue, $pushValue);
      }
      .push-#{$i}{
        @include push($i);
      }
      .pull-#{$i}{
        @include pull($i);
      }
    }
  }
}

@mixin grid-media-query($breakpoint) {
  $breakpoint-found: false;
  $value: map-get($BREAKPOINTS, $breakpoint);
  @if $value != null {
    @include respond-to($breakpoint) {
      @content;
    }
  }
}

@include device-type;

// If $suffix is 'true', then rerun the device-type mixin to add suffixes
@if $suffix == true{
  @each $name in $breakpoint-has-widths {
    @include grid-media-query($name) {
      @include device-type('#{$name}');
    }
  }
}

// SUSY SPECIFC STYLING
.wrapper {
  @include container();
  // If susy debug is toggled, then overwrite the '*' background-repeat value (won't show the columns otherwise)
  @if map-get($susy, debug) != null{
    background-repeat:repeat;
  }
}

// Overwrite the .center class margin-right
.remove-center{
  margin-right:0;
}

.row {
  @extend %clearfix;
  display: block;
}

[class^='span-'] {
  float:left;
  margin-right:gutter();
  &:last-child {
    margin-right: 0;
  }
}
